version: "3"

services:
  frontend:
    #Dockerfile의 경로
    build: ./MATHRONE_Frontend_Submodule
    command: ["npm", "start"]
    ports:
      - 3000:3000
    networks:
      - app-tier
    # 연결할 외부 디렉토리 : 컨테이너 내 디렉토리(작업공간 app으로 설정해줌 -> frontend/Dockerfile)
    volumes:
      - ./MATHRONE_Frontend_Submodule:/app
  backend:
    build: ./MATHRONE_Backend_Submodule
    ports:
      - 8080:8080
    networks:
      - app-tier
    volumes:
      - ./src/main/resources/application-kakao.properties:/tmp/application-kakao.properties
    environment:
      - spring.config.additional-location=file:///tmp/application-kakao.properties
  redis:
      image: redis:alpine
      command: redis-server --port 6379
      container_name: redis
      hostname: redis
      networks:
        - app-tier
      ports:
        - 6379:6379
      volumes:
      - ./redis:/data
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/config/:/prometheus
      - ./prometheus/prometheus-volume:/prometheus
    ports:
      - 9090:9090
    command: # web.enalbe-lifecycle은 api 재시작없이 설정파일들을 reload 할 수 있게 해줌
      - '--web.enable-lifecycle'
    restart: always
    networks:
      - app-tier
  grafana:
    image: grafana/grafana
    container_name: grafana
    # user: "$GRA_UID:$GRA_GID"
    ports:
      - 3030:3000
    volumes:
      - ./grafana/grafana-volume:/var/lib/grafana
    restart: always
    networks:
      - app-tier
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - 9100:9100
    networks:
      - app-tier

networks:
  app-tier:
    driver: bridge
